Trigger on Ticket object
Handler Classs-

public class Eventdescription {
    public static void my_event(List<ticket__c> tlist){
        set<id> concertIds = new set<id>();//To hold Ids of concerts
        set<id> contactIds = new set<id>();//To hold Ids of contacts
        Map<id,consert__c> concertsById = new Map<id,consert__c>();//fill the map with concerts ids 
        Map<id,contact> contactById = new Map<id,contact>();
        
        
        for(ticket__c tc:tlist){
            concertIds.add(tc.consert__c);
            contactIds.add(tc.Contact__c);
        }
        for(consert__c consert: [select id,name,venue__c ,date__c  from consert__c where id In: concertIds]){
            concertsById.put(consert.Id,consert);
            
        }
        for( contact contact :[select id,name from contact where id in :contactIds]){
            contactById.put(contact.Id,contact);
        }
        List<Event> eventlist = new List<Event>();
        for(ticket__c tc: tlist){
            consert__c  consert  = concertsById.get(tc.consert__c);
            contact contact =  contactById.get(tc.Contact__c);
            if( consert !=null && contact!=null){
                Event event = new Event();
               // event.Id = tc.Id;
                event.Subject = 'Music event';
                event.Description = 'Hii '    + contact.Name  +'\nGretting!\n'   +consert.Name  + '\nat\n' +consert.venue__c    +'\non\n'         +consert.Date__c        +  '\nplease visit Happy Event\n';
                event.Location ='Haldwani';
                event.StartDateTime = system.now();
                event.EndDateTime = event.StartDateTime.addHours(2);
                event.WhoId = contact.Id;
                event.WhatId = consert.Id;
                eventlist.add(event);
                
            }
        }
        
        insert eventlist;
    }
    
}

*********************** Trigger*************************************
trigger Eventinsert on ticket__c (after insert) {
    if(trigger.isafter){
        if(trigger.isinsert){
            Eventdescription.my_event(trigger.new);
        }
    }
    
}


Trigger on contact object
Handler Class-
public class ContactToupdate {
    public static void my_contact(List<contact> conlist){
        
        // create set to hold contact id
        set<id> contactIds = new set<id>();
        //Add id into contact 
        for(contact con : conlist){
            contactIds.add(con.Id);
            system.debug('@@@@@>>>>>'+contactIds);
        }
        
        // Query and retrive data for event
        List<Event> eventlist = [SELECT Id, WhoId, Who.Name, Subject, Location, StartDateTime, Description FROM Event WHERE WhoId IN : contactIds];
        List<Event> evlist = new List<Event>();
        for(Event evt : eventlist) {
            system.debug('@@@@@++++');
            system.debug('Event ==> '+evt);
            String cst = evt.Who.Name;
            system.debug('Contact == ' +cst);
            evt.Description = 'Hi ' + cst + '\nGreeting!\n  \nYou are invited to\n ' + evt.Subject +' at '+evt.Location+ ' on ' + evt.StartDateTime + '\nPlease visit! \nHappy Event!';
            evlist.add(evt);
        }
        // update Event
        if(!evlist.isEmpty()){
            update evlist;
        }
        
        
    }
}
********************* Trigger*********************
trigger contacupdate on Contact (after update) {
    // get the id of the customer record type
    List<contact> conlist = new List<contact>();
    for(contact con :trigger.new){
     if(con.FirstName!= trigger.oldMap.get(con.Id).FirstName||(con.LastName!=trigger.oldmap.get(con.id).LastName)){
            conlist.add(con);
            
        }
    }
     RecordType contacttypeid = [select id,name from recordtype where name = 'Customer'];
    for(contact con :conlist){
        if(con.RecordTypeId== contacttypeid.Id){
            ContactToupdate.my_contact(trigger.new);
        }
    }
}

Trigger on Consert object
Handler Class-
public class ConsertToupdate {
    public static void my_method( Map<Id, Consert__c> consertToMap){
        try{
            if (Schema.sObjectType.Consert__c.isUpdateable()) { 
                
                Map<Id, Set<String>> customerTicketsMap = new Map<Id, Set<String>>();
                Map<Id, Consert__c> ticketConcertMap = new Map<Id, Consert__c>();
                Map<Id, Event> eventUpdateMap = new Map<Id, Event>();
                
                // Get the customer
                for (Ticket__c tickets : [SELECT Id, contact__c, Consert__c, Consert__r.Name, Consert__r.Venue__c, Consert__r.Date__c FROM Ticket__c WHERE Consert__c IN:consertToMap.keySet()]) {
                    // use consertMap
                    ticketConcertMap.put(tickets .Id, consertToMap.get(tickets.Consert__c));
                    
                    // customer and Ticket Map
                    if (customerTicketsMap.containsKey(tickets.contact__c)) {
                        customerTicketsMap.get(tickets.contact__c).add(tickets.Id);
                    } else {
                        Set<String> ticketIds = new Set<String>{tickets.Id};
                            customerTicketsMap.put(tickets.contact__c, ticketIds);
                    }
                }
                
                // Get the events 
                List<Event> eventsToUpdate = [SELECT Id, WhoId, Who.Name, Description, Subject, Location, StartDateTime FROM Event WHERE WhoId IN :customerTicketsMap.keySet()];
                system.debug('eventsToupdate@@@@>>>>'+eventsToUpdate);
                
                // update event description
                for(Event ev : eventsToUpdate){            
                    Id customerId = ev.WhoId;            
                    for(String tk : customerTicketsMap.get(customerId)){               
                        Consert__c consert = ticketConcertMap.get(tk);                
                        if(consert != null){
                            ev.Description = 'Hi, ' + ev.Who.Name + ',\nGreeting!\n' + consert.Name+ ' \nat\n' + consert.Venue__c + ' on\n'  + consert.Date__c + '\nPlease Visit!\n' + '\nHappy Event!\n';
                            eventUpdateMap.put(ev.Id, ev);
                        }
                    }
                }         
                
                // update event
                List<Event> eventsToUpdateList = new List<Event>(eventUpdateMap.values());
                update eventsToUpdateList;
            }
        }catch(Exception ex){
            system.debug('error>>>>'+ex.getMessage());
        }
        
    } 
}

********************* Trigger*********************
trigger consertupdate on consert__c (after update) {
    if(trigger.isafter && trigger.isupdate){
        consertupdate.my_consert(trigger.newMap);
    }

}
    



